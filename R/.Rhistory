names(res) <- names(parsed[[1]])
names(parsed[[1]])
res
names(res) <- names(parsed[[1]])
colnames(res) <- names(parsed[[1]])
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=100, byrow = T))
colnames(res) <- names(parsed[[1]])
View(res)
getUsers <- function() {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/list/?application_id=%s&search=qwe", app.id))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=100, byrow = T))
names(res) <- names(parsed[[1]])
res
}
users100 <- getUsers()
View(users100)
library(jsonlite)
toJSON(user100$account_id)
toJSON(users100$account_id)
getTankStat <- function(users) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s", app.id, toJSON(users)))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=100, byrow = T))
names(res) <- names(parsed[[1]])
res
}
usersStat <- getTankStat(users100$account_id)
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s", app.id, toJSON(users100$account_id)))
response
parsed <- content(response, type="application/json")
str(users100)
class(users100$account_id) <- "integer"
usersStat <- getTankStat(users100$account_id)
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s", app.id, toJSON(users100$account_id)))
parsed <- content(response, type="application/json")
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s", app.id, toJSON(users100$account_id[1])))
parsed <- content(response, type="application/json")
toJSON(users100$account_id[1])
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s", app.id, users100$account_id[1]))
parsed <- content(response, type="application/json")
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=1, byrow = T))
View(res)
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s&fields=all.battle_avg_xp", app.id, users100$account_id[1]))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=1, byrow = T))
names(res) <- names(parsed[[1]])
View(res)
res
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s&fields=tank_id,all.battle_avg_xp", app.id, users100$account_id[1]))
parsed <- content(response, type="application/json")$data
View(users100)
response <- GET("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles", app.id, user)
View(res)
res
View(users100)
user = 71611631
response <- GET("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles", app.id, user)
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles", app.id, user))
parsed <- content(response, type="application/json")$data
user = 71611631
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles", app.id, user))
content(response, type="application/json")$data$statistics$all$batles
content(response, type="application/json")$data$statistics$all$battles
user = 71611631
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles", app.id, user))
content(response, type="application/json")$data$statistics$all$battles
content(response, type="application/json")$data
content(response, type="application/json")$data$user$statistics$all$battles
content(response, type="application/json")$data$user
content(response, type="application/json")$data[[user]]
content(response, type="application/json")$data[[toString(user)]]
content(response, type="application/json")$data[[toString(user)]]$statistics$all$battles
26 * 26
26 * 26 * 26
26 * 26 * 26 * 26
getUsersBattles <- function(user) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles", app.id, user))
Sys.sleep(0.1)
content(response, type="application/json")$data[[toString(user)]]$statistics$all$battles
}
user100[, .(battles = getUsersBattles(account_id)), by = account_id]
users100[, .(battles = getUsersBattles(account_id)), by = account_id]
letters
getStarting <- function(depth) {
ifelse(depth > 1, paste0(letters, getStarting(depth - 1)), letters)
}
getStarting(1)
letters
getStarting <- function(depth) {
if(depth > 1) {
paste0(letters, getStarting(depth - 1))
} else {
letters
}
}
letters
getStarting(1)
getStarting(2)
getStarting <- function(depth) {
if(depth > 1) {
to.paste <- getStarting(depth - 1)
lapply(letters, function(x) paste0(x, to.paste))
} else {
letters
}
}
getStarting(1)
getStarting(2)
getStarting <- function(depth) {
if(depth > 1) {
to.paste <- getStarting(depth - 1)
unlist(lapply(letters, function(x) paste0(x, to.paste)))
} else {
letters
}
}
getStarting(2)
getStarting(3)
26 * 26 * 26
dt1 <- data.table(A = 1, B = 1)
dt2 <- data.table(A = 2, B = 2)
setkey(dt1, A)
dt3 <- rbind(dt1, dt2)
key(dt3)
key(dt1)
key(dt2)
View(users100)
user = 71617981
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles,private.garage", app.id, user))
content(response, type="application/json")$data[[toString(user)]]
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles&extra=private.garage", app.id, user))
content(response, type="application/json")$data[[toString(user)]]
content(response, type="application/json")$data
View(users100)
user = 71611631
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles&extra=private.garage", app.id, user))
content(response, type="application/json")$data
content(response, type="application/json")$data[[toString(user)]]$statistics$all$battles
content(response, type="application/json")
startings <- getStarting(3)
startings <- sample(startings, 1000)
getUsers <- function(startings, limit = 100) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/list/?application_id=%s&search=%s&limit=", app.id, startings, limit))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=limit, byrow = T))
names(res) <- names(parsed[[1]])
res
}
debug(getUsers)
getUsers("lox")
getUsers <- function(startings, limit = 100) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/list/?application_id=%s&search=%s&limit=", app.id, startings, limit))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=length(parsed), byrow = T))
names(res) <- names(parsed[[1]])
res
}
getUsers("lox")
getUsers <- function(startings, limit = 100) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/list/?application_id=%s&search=%s&limit=", app.id, startings, limit))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=length(parsed), byrow = T))
names(res) <- names(parsed[[1]])
res
}
getUsersBattles <- function(user) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battle", app.id, user))
Sys.sleep(0.1)
content(response, type="application/json")$data[[toString(user)]]$statistics$all$battles
}
getUsersWithBattles <- function(startings) {
users <- getUsers(startings)
users <- users[, .(nickname = nickname, battles = getUsersBattles(account_id)), by = account_id]
users
}
getTankStat <- function(users) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s&fields=tank_id,all.battle_avg_xp", app.id, users100$account_id[1]))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=1, byrow = T))
names(res) <- names(parsed[[1]])
res
}
startings.dt <- data.table(start = startings)
View(startings.dt)
users <- startings.dt[1:1, getUsersWithBattles(start), by = start]
getUsersWithBattles("abc")
getUsers <- function(startings, limit = 100) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/list/?application_id=%s&search=%s&limit=", app.id, startings, limit))
parsed <- content(response, type="application/json")$data
res <- data.table(matrix(unlist(parsed), nrow=length(parsed), byrow = T))
names(res) <- names(parsed[[1]])
class(res$account_id) <- "integer"
res
}
getUsersWithBattles("abc")
debug(getUsersWithBattles)
getUsersWithBattles("abc")
View(users)
str(users)
View(users)
debug(getUsersBattles)
users <- users[, .(nickname = nickname, battles = getUsersBattles(account_id)), by = account_id]
content(response, type="application/json")$data
getUsersBattles <- function(user) {
response <- GET(sprintf("https://api.worldoftanks.ru/wot/account/info/?application_id=%s&account_id=%s&fields=statistics.all.battles", app.id, user))
Sys.sleep(0.1)
content(response, type="application/json")$data[[toString(user)]]$statistics$all$battles
}
getUsersWithBattles("abc")
View(users)
getUsersWithBattles <- function(startings) {
users <- getUsers(startings)
users <- users[, .(nickname = nickname, battles = getUsersBattles(account_id)), by = account_id]
users[battles >= 10000]
}
users <- startings.dt[1:2, getUsersWithBattles(start), by = start]
View(users)
library(logging)
getUsersWithBattles <- function(startings) {
users <- getUsers(startings)
users <- users[, .(nickname = nickname, battles = getUsersBattles(account_id)), by = account_id]
users <- users[battles >= 10000]
loginfo(paste0("Found ", nrow(users), " users starting with ", startings))
users
}
users <- startings.dt[1:2, getUsersWithBattles(start), by = start]
loginfo("Hello")
loginfo("Hello")
ls(getLogger())
loginfo("Hello")
addHandler(writeToConsole)
loginfo("Hello")
users <- startings.dt[1:2, getUsersWithBattles(start), by = start]
users <- startings.dt[, getUsersWithBattles(start), by = start]
startings <- sample(startings, 20)
startings <- getStarting(3)
startings <- sample(startings, 20)
getUsersWithBattles <- function(startings) {
users <- tryCatch({
users <- getUsers(startings)
users <- users[, .(nickname = nickname, battles = getUsersBattles(account_id)), by = account_id]
users <- users[battles >= 10000]
loginfo(paste0("Found ", nrow(users), " users starting with ", startings))
users
}, error = function(e) {
loginfo(paste0("Error on '", startings, "' : ", e))
})
users
}
getUsersWithBattles <- function(startings) {
users <- tryCatch({
users <- getUsers(startings)
users <- users[, .(nickname = nickname, battles = getUsersBattles(account_id)), by = account_id]
users <- users[battles >= 10000]
loginfo(paste0("Found ", nrow(users), " users starting with '", startings, "'"))
users
}, error = function(e) {
loginfo(paste0("Error on '", startings, "' : ", e))
})
users
}
users <- startings.dt[, getUsersWithBattles(start), by = start]
startings <- sample(startings, 10)
startings <- getStarting(3)
startings <- sample(startings, 10)
getUsersWithBattles <- function(startings) {
users <- tryCatch({
users <- getUsers(startings)
users <- users[, .(nickname = nickname, battles = getUsersBattles(account_id)), by = account_id]
users <- users[battles >= 10000]
loginfo(paste0("Found ", nrow(users), " users starting with '", startings, "'"))
users
}, error = function(e) {
loginfo(paste0("Error on '", startings, "' : ", e))
data.table(account_id = integer(), battles = integer())
})
users
}
startings.dt <- data.table(start = startings)
users <- startings.dt[, getUsersWithBattles(start), by = start]
View(users)
dbInit <- function(db.name = "wot.sqlite") {
con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
RSQLite::dbSendQuery(
con,
"create table users (
account_id integer primary key,
nickname varchar(24),
battles integer
)"
)
RSQLite::dbDisconnect(con)
}
dbInit()con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
dbInit()
con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "wot.sqlite")
RSQLite::dbWriteTable(con, "users", users[,.(account_id, nickname, battles)], append = T)
RSQLite::dbDisconnect(con)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "wot.sqlite")
users1 <- RSQLite::dbReadTable(con, "users")
RSQLite::dbDisconnect(con)
View(users1)
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s&fields=tank_id,all.battle_avg_xp", app.id, users$account_id[1]))
parsed <- content(response, type="application/json")$data
parsed <- content(response, type="application/json")$data[[toString(user)]]
parsed <- content(response, type="application/json")$data
user <- users$account_id[1]
parsed <- content(response, type="application/json")$data[[toString(user)]]
res <- Reduce(
rbind,
lapply(parsed, function(l) {
data.table(tank_id = l$tank_id, xp = l$all$battle_avg_xp)
})
)
View(res)
View(res)
res <- Reduce(
rbind,
lapply(parsed, function(l) {
data.table(account_id = user, tank_id = l$tank_id, xp = l$all$battle_avg_xp)
})
)
View(res)
getTankStat <- function(user) {
res <- tryCatch({
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s&fields=tank_id,all.battle_avg_xp", app.id, user))
parsed <- content(response, type="application/json")$data[[toString(user)]]
res <- Reduce(
rbind,
lapply(parsed, function(l) {
data.table(account_id = user, tank_id = l$tank_id, xp = l$all$battle_avg_xp)
})
)
loginfo(paste0("User ", user, " played at ", nrow(res), " tanks"))
res
}, error = function(e) {
loginfo(paste0("Error on user ", user, " : ", e))
data.table(account_id = integer(), tank_id = integer(), xp = integer())
})
Sys.sleep(0.1)
res
}
usersTanks <- users[, .(account_id = getTankStat(account_id)), by = account_id]
getTankStat <- function(user) {
res <- tryCatch({
response <- GET(sprintf("https://api.worldoftanks.ru/wot/tanks/stats/?application_id=%s&account_id=%s&fields=tank_id,all.battle_avg_xp", app.id, user))
parsed <- content(response, type="application/json")$data[[toString(user)]]
res <- Reduce(
rbind,
lapply(parsed, function(l) {
data.table(tank_id = l$tank_id, xp = l$all$battle_avg_xp)
})
)
loginfo(paste0("User ", user, " played at ", nrow(res), " tanks"))
res
}, error = function(e) {
loginfo(paste0("Error on user ", user, " : ", e))
data.table(tank_id = integer(), xp = integer())
})
Sys.sleep(0.1)
res
}
usersTanks <- users[, .(account_id = getTankStat(account_id)), by = account_id]
getTankStat(users$account_id[1])
getTankStat(users$account_id[2])
usersTanks <- users[1:2, .(account_id = getTankStat(account_id)), by = account_id]
usersTanks <- users[1:2, getTankStat(account_id), by = account_id]
View(usersTanks)
usersTanks <- users[, getTankStat(account_id), by = account_id]
usersTanks
dbInit <- function(db.name = "wot.sqlite") {
con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
# RSQLite::dbSendQuery(
#   con,
#   "create table users (
#   account_id integer primary key,
#   nickname varchar(24),
#   battles integer
#   )"
#   )
RSQLite::dbSendQuery(
con,
"create table tanks_xp (
account_id integer primary key,
tank_id integer primary key,
xp integer
)"
)
RSQLite::dbDisconnect(con)
}
dbInit()
dbInit <- function(db.name = "wot.sqlite") {
con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
# RSQLite::dbSendQuery(
#   con,
#   "create table users (
#   account_id integer primary key,
#   nickname varchar(24),
#   battles integer
#   )"
#   )
RSQLite::dbSendQuery(
con,
"create table tanks_xp (
account_id integer,
tank_id integer,
xp integer,
primary key(account_id, tank_id)
)"
)
RSQLite::dbDisconnect(con)
}
dbInit()
dbInit <- function(db.name = "wot.sqlite") {
con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
# RSQLite::dbSendQuery(
#   con,
#   "create table users (
#   account_id integer primary key,
#   nickname varchar(24),
#   battles integer
#   )"
#   )
RSQLite::dbGetQuery(
con,
"create table tanks_xp (
account_id integer,
tank_id integer,
xp integer,
primary key(account_id, tank_id)
)"
)
RSQLite::dbDisconnect(con)
}
dbInit()
con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "wot.sqlite")
RSQLite::dbRemoveTable(con, "tank_xp")
RSQLite::dbRemoveTable(con, "tanks_xp")
RSQLite::dbDisconnect(con)
dbInit()
dbInit <- function(db.name = "wot.sqlite") {
con <- RSQLite::dbConnect(RSQLite::SQLite(), db.name)
RSQLite::dbGetQuery(
con,
"create table users (
account_id integer primary key,
nickname varchar(24),
battles integer
)"
)
RSQLite::dbGetQuery(
con,
"create table tanks_xp (
account_id integer,
tank_id integer,
xp integer,
primary key(account_id, tank_id)
)"
)
RSQLite::dbDisconnect(con)
}
View(usersTanks)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "wot.sqlite")
users1 <- RSQLite::dbWriteTable(con, "tanks_xp", usersTanks, append = T)
RSQLite::dbDisconnect(con)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "wot.sqlite")
users1 <- RSQLite::dbReadTable(con, "users_tanks")
users1 <- RSQLite::dbReadTable(con, "users_xp")
users1 <- RSQLite::dbReadTable(con, "tanks_xp")
RSQLite::dbDisconnect(con)
View(users1)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "wot.sqlite")
tanks.xp <- RSQLite::dbReadTable(con, "tanks_xp")
RSQLite::dbDisconnect(con)
X <- dcast(tanks.xp, account_id ~ tank_id, value.var = "xp", fun.aggregate = sum)
View(X)
in.train <- sample(1:nrow(X), 0.9 * nrow(X))
training <- X[in.train, !c("account_id"), with = F]
in.train <- sample(1:nrow(X), 0.9 * nrow(X))
training <- X[in.train, !c("account_id"), with = F]
str(X)
require(data.table)
require(logging)
require(RSQLite)
con <- RSQLite::dbConnect(RSQLite::SQLite(), "wot.sqlite")
tanks.xp <- as.data.table(RSQLite::dbReadTable(con, "tanks_xp"))
RSQLite::dbDisconnect(con)
X <- dcast(tanks.xp, account_id ~ tank_id, value.var = "xp", fun.aggregate = sum)
library(randomForest)
in.train <- sample(1:nrow(X), 0.9 * nrow(X))
training <- X[in.train, !c("account_id"), with = F]
testing <- X[-in.train, !c("account_id"), with = F]
model <- randomForest(as.formula("1 ~ ."), data = training, ntree = 11)
View(X)
model <- randomForest(as.formula("`1` ~ ."), data = training, ntree = 11)
names(training) <- paste("tank", names(training), sep = "_")
names(testing) <- paste("tank", names(testing), sep = "_")
model <- randomForest(as.formula("tank_1 ~ ."), data = training, ntree = 11)
res <- data.frame(y = testing$tank_1, y_pred = predict(model, testing))
View(res)
startings[500, ]
startings[500]
startings <- getStarting(3)
startings <- startings[1:500, ]
startings <- startings[1:500]
startings[500]
26 * 26
